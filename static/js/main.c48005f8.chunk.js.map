{"version":3,"sources":["types/FilterType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","helpers/getFilteredTodos.ts","index.tsx"],"names":["FilterOptions","TodoList","todos","activeTodo","handleToggleModal","handleSetActiveTodo","className","map","todo","id","title","completed","classNames","type","onClick","handleOpenModal","TodoFilter","filter","handleSetFilter","handleClearInput","name","value","filterByStatus","onChange","e","All","Active","Completed","placeholder","filterByTitle","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","user","setUser","isLoading","setIsLoading","userId","NaN","useLayoutEffect","Number","isNaN","getUser","finally","href","email","initialFilterValue","App","setTodos","isVisibleModal","setIsVisibleModal","setActiveTodo","setFilter","filteredTodos","toLowerCase","includes","getFilteredTodos","prev","useEffect","event","target","prevFilter","trimStart","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c48005f8.chunk.js","sourcesContent":["export enum FilterOptions {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\nexport type FilterType = {\n  filterByTitle: string,\n  filterByStatus: FilterOptions,\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  activeTodo: Todo | null,\n  handleToggleModal: () => void,\n  handleSetActiveTodo: (todo: Todo | null) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  activeTodo,\n  handleToggleModal,\n  handleSetActiveTodo,\n}) => {\n  const handleOpenModal = (todo: Todo) => {\n    handleToggleModal();\n    handleSetActiveTodo(todo);\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const {\n            id,\n            title,\n            completed,\n          } = todo;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': id === activeTodo?.id,\n              })}\n              key={id}\n            >\n              <td className=\"is-vcentered\">\n                {id}\n              </td>\n\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={classNames({\n                    'has-text-danger': !completed,\n                    'has-text-success': completed,\n                  })}\n                >\n                  {title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => handleOpenModal(todo)}\n                >\n                  <span className=\"icon\">\n                    <i\n                      className={classNames('far', {\n                        'fa-eye': id !== activeTodo?.id,\n                        'fa-eye-slash': id === activeTodo?.id,\n                      })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\n\nimport { FilterType, FilterOptions } from '../../types/FilterType';\n\ntype Props = {\n  filter: FilterType,\n  handleSetFilter: (event:\n  React.ChangeEvent<HTMLSelectElement | HTMLInputElement>) => void,\n  handleClearInput: () => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  filter,\n  handleSetFilter,\n  handleClearInput,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          name=\"filterByStatus\"\n          value={filter.filterByStatus}\n          onChange={(e) => handleSetFilter(e)}\n        >\n          <option value={FilterOptions.All}>All</option>\n          <option value={FilterOptions.Active}>Active</option>\n          <option value={FilterOptions.Completed}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        name=\"filterByTitle\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={filter.filterByTitle}\n        onChange={(e) => handleSetFilter(e)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {filter.filterByTitle && (\n          /* eslint-disable-next-line jsx-a11y/control-has-associated-label */\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={handleClearInput}\n          />\n        )}\n      </span>\n    </p>\n  </form>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useLayoutEffect, useState } from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  activeTodo: Todo | null,\n  handleToggleModal: () => void,\n  handleSetActiveTodo: (todo: Todo | null) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  activeTodo,\n  handleToggleModal,\n  handleSetActiveTodo,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const userId = activeTodo ? activeTodo.userId : NaN;\n\n  useLayoutEffect(() => {\n    if (Number.isNaN(userId)) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    getUser(userId)\n      .then(setUser)\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const handleCloseModal = () => {\n    handleSetActiveTodo(null);\n    handleToggleModal();\n    setUser(null);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${activeTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCloseModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {activeTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong\n                className={classNames({\n                  'has-text-danger': !activeTodo?.completed,\n                  'has-text-success': activeTodo?.completed,\n                })}\n              >\n                {activeTodo?.completed\n                  ? 'Done'\n                  : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Todo } from './types/Todo';\nimport { FilterOptions, FilterType } from './types/FilterType';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { getFilteredTodos } from './helpers/getFilteredTodos';\n\nconst initialFilterValue: FilterType = {\n  filterByTitle: '',\n  filterByStatus: FilterOptions.All,\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isVisibleModal, setIsVisibleModal] = useState(false);\n  const [activeTodo, setActiveTodo] = useState<Todo | null>(null);\n  const [filter, setFilter] = useState(initialFilterValue);\n\n  const filteredTodos = getFilteredTodos(todos, filter);\n\n  const handleToggleModal = () => {\n    setIsVisibleModal(prev => !prev);\n  };\n\n  const handleSetActiveTodo = (todo: Todo | null) => {\n    setActiveTodo(todo);\n  };\n\n  const handleSetFilter\n  = (event: React.ChangeEvent<HTMLSelectElement | HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setFilter(prevFilter => ({\n      ...prevFilter,\n      [name]: value.trimStart(),\n    }));\n  };\n\n  const handleClearInput\n  = () => {\n    setFilter(prevFilter => ({\n      ...prevFilter,\n      filterByTitle: '',\n    }));\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filter={filter}\n                handleSetFilter={handleSetFilter}\n                handleClearInput={handleClearInput}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={filteredTodos}\n                  activeTodo={activeTodo}\n                  handleToggleModal={handleToggleModal}\n                  handleSetActiveTodo={handleSetActiveTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isVisibleModal && (\n        <TodoModal\n          activeTodo={activeTodo}\n          handleToggleModal={handleToggleModal}\n          handleSetActiveTodo={handleSetActiveTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { FilterType, FilterOptions } from '../types/FilterType';\n\nexport const getFilteredTodos = (todos: Todo[], filter: FilterType) => {\n  const { filterByTitle, filterByStatus } = filter;\n  let filteredTodos: Todo[] = [...todos];\n\n  if (filterByTitle) {\n    filteredTodos = filteredTodos.filter(({ title }) => (\n      title\n        .toLowerCase()\n        .includes(filterByTitle.toLowerCase())\n    ));\n  }\n\n  switch (filterByStatus) {\n    case FilterOptions.All:\n      return filteredTodos;\n\n    case FilterOptions.Active:\n      return filteredTodos.filter(({ completed }) => !completed);\n\n    case FilterOptions.Completed:\n      return filteredTodos.filter(({ completed }) => completed);\n\n    default:\n      return filteredTodos;\n  }\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}