{"version":3,"sources":["types/FilterType.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/ErrorText/ErrorText.tsx","components/TodoModal/TodoModal.tsx","App.tsx","helpers/getFilteredTodos.ts","index.tsx"],"names":["FilterOptions","TodoItem","todo","activeTodo","onModalOpen","id","title","completed","className","classNames","type","onClick","TodoList","todos","onModalToggle","onActiveTodoSet","handleModalOpen","map","TodoFilter","filter","onFilterSet","onInputClear","name","value","filterByStatus","onChange","Object","keys","key","placeholder","filterByTitle","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","ErrorText","TodoModal","useState","user","setUser","isLoading","setIsLoading","userId","error","setError","useLayoutEffect","getUser","catch","finally","href","email","initialFilterValue","All","App","setTodos","isVisibleModal","setIsVisibleModal","setActiveTodo","setFilter","filteredTodos","toLowerCase","includes","Active","Completed","getFilteredTodos","handleModalToggle","prev","handleActiveTodoSet","useEffect","event","target","prevFilter","trimStart","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b32b8cec.chunk.js","sourcesContent":["export enum FilterOptions {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\nexport type FilterType = {\n  filterByTitle: string,\n  filterByStatus: FilterOptions,\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  activeTodo: Todo | null,\n  onModalOpen: (todo: Todo) => void,\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  activeTodo,\n  onModalOpen,\n}) => {\n  const {\n    id,\n    title,\n    completed,\n  } = todo;\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={classNames({\n        'has-background-info-light': id === activeTodo?.id,\n      })}\n    >\n      <td className=\"is-vcentered\">\n        {id}\n      </td>\n\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={classNames({\n            'has-text-danger': !completed,\n            'has-text-success': completed,\n          })}\n        >\n          {title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => onModalOpen(todo)}\n        >\n          <span className=\"icon\">\n            <i\n              className={classNames('far', {\n                'fa-eye': id !== activeTodo?.id,\n                'fa-eye-slash': id === activeTodo?.id,\n              })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\n\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\n\ntype Props = {\n  todos: Todo[],\n  activeTodo: Todo | null,\n  onModalToggle: () => void,\n  onActiveTodoSet: (todo: Todo | null) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  activeTodo,\n  onModalToggle,\n  onActiveTodoSet,\n}) => {\n  const handleModalOpen = (todo: Todo) => {\n    onModalToggle();\n    onActiveTodoSet(todo);\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <TodoItem\n            todo={todo}\n            activeTodo={activeTodo}\n            onModalOpen={handleModalOpen}\n            key={todo.id}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\n\nimport { FilterType, FilterOptions } from '../../types/FilterType';\n\ntype Props = {\n  filter: FilterType,\n  onFilterSet: (event:\n  React.ChangeEvent<HTMLSelectElement | HTMLInputElement>) => void,\n  onInputClear: () => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  filter,\n  onFilterSet,\n  onInputClear,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          name=\"filterByStatus\"\n          value={filter.filterByStatus}\n          onChange={onFilterSet}\n        >\n          {(Object.keys(FilterOptions) as (keyof typeof FilterOptions)[])\n            .map((key) => (\n              <option value={FilterOptions[key]} key={key}>\n                {key}\n              </option>\n            ))}\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        name=\"filterByTitle\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={filter.filterByTitle}\n        onChange={onFilterSet}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {filter.filterByTitle && (\n          /* eslint-disable-next-line jsx-a11y/control-has-associated-label */\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={onInputClear}\n          />\n        )}\n      </span>\n    </p>\n  </form>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\n\nexport const ErrorText: React.FC = () => (\n  <article className=\"message is-danger\">\n    <div className=\"message-header\">\n      <p>Error</p>\n    </div>\n  </article>\n);\n","import React, { useLayoutEffect, useState } from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\nimport { ErrorText } from '../ErrorText';\n\ntype Props = {\n  activeTodo: Todo | null,\n  onModalToggle: () => void,\n  onActiveTodoSet: (todo: Todo | null) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  activeTodo,\n  onModalToggle,\n  onActiveTodoSet,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const userId = activeTodo ? activeTodo.userId : null;\n  const [error, setError] = useState(false);\n\n  useLayoutEffect(() => {\n    if (!userId) {\n      return;\n    }\n\n    setError(false);\n\n    setIsLoading(true);\n\n    getUser(userId)\n      .then(setUser)\n      .catch(() => setError(true))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const handleCloseModal = () => {\n    onActiveTodoSet(null);\n    onModalToggle();\n    setUser(null);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${activeTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCloseModal}\n            />\n          </header>\n\n          {error ? (<ErrorText />\n          ) : (\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {activeTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                <strong\n                  className={classNames({\n                    'has-text-danger': !activeTodo?.completed,\n                    'has-text-success': activeTodo?.completed,\n                  })}\n                >\n                  {activeTodo?.completed\n                    ? 'Done'\n                    : 'Planned'}\n                </strong>\n\n                {' by '}\n\n                <a href={`mailto:${user?.email}`}>\n                  {user?.name}\n                </a>\n              </p>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Todo } from './types/Todo';\nimport { FilterOptions, FilterType } from './types/FilterType';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { ErrorText } from './components/ErrorText';\nimport { getTodos } from './api';\nimport { getFilteredTodos } from './helpers/getFilteredTodos';\n\nconst initialFilterValue: FilterType = {\n  filterByTitle: '',\n  filterByStatus: FilterOptions.All,\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isVisibleModal, setIsVisibleModal] = useState(false);\n  const [activeTodo, setActiveTodo] = useState<Todo | null>(null);\n  const [filter, setFilter] = useState(initialFilterValue);\n  const [error, setError] = useState(false);\n\n  const filteredTodos = getFilteredTodos(todos, filter);\n\n  const handleModalToggle = () => {\n    setIsVisibleModal(prev => !prev);\n  };\n\n  const handleActiveTodoSet = (todo: Todo | null) => {\n    setActiveTodo(todo);\n  };\n\n  const handleFilterSet\n    = (event: React.ChangeEvent<HTMLSelectElement | HTMLInputElement>) => {\n      const { name, value } = event.target;\n\n      setFilter(prevFilter => ({\n        ...prevFilter,\n        [name]: value.trimStart(),\n      }));\n    };\n\n  const handleInputClear\n    = () => {\n      setFilter(prevFilter => ({\n        ...prevFilter,\n        filterByTitle: '',\n      }));\n    };\n\n  useEffect(() => {\n    setIsLoading(true);\n    setError(false);\n\n    getTodos()\n      .then(setTodos)\n      .catch(() => setError(true))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  if (error) {\n    return (\n      <ErrorText />\n    );\n  }\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filter={filter}\n                onFilterSet={handleFilterSet}\n                onInputClear={handleInputClear}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={filteredTodos}\n                  activeTodo={activeTodo}\n                  onModalToggle={handleModalToggle}\n                  onActiveTodoSet={handleActiveTodoSet}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isVisibleModal && (\n        <TodoModal\n          activeTodo={activeTodo}\n          onModalToggle={handleModalToggle}\n          onActiveTodoSet={handleActiveTodoSet}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { FilterType, FilterOptions } from '../types/FilterType';\n\nexport const getFilteredTodos = (todos: Todo[], filter: FilterType) => {\n  const { filterByTitle, filterByStatus } = filter;\n  let filteredTodos: Todo[] = [...todos];\n\n  if (filterByTitle) {\n    filteredTodos = filteredTodos.filter(({ title }) => (\n      title\n        .toLowerCase()\n        .includes(filterByTitle.toLowerCase())\n    ));\n  }\n\n  switch (filterByStatus) {\n    case FilterOptions.All:\n      return filteredTodos;\n\n    case FilterOptions.Active:\n      return filteredTodos.filter(({ completed }) => !completed);\n\n    case FilterOptions.Completed:\n      return filteredTodos.filter(({ completed }) => completed);\n\n    default:\n      return filteredTodos;\n  }\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}